generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model adonis_schema {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  batch          Int
  migrationTime DateTime? @default(now()) @db.Timestamptz(6)
}

model adonis_schema_versions {
  version Int @id
}

model courses {
  id               String             @id @db.VarChar(255)
  name             String?            @db.VarChar(255)
  registrationId  String?            @db.VarChar(255)
  createdAt       DateTime?          @db.Timestamptz(6)
  updatedAt       DateTime?          @db.Timestamptz(6)
  isActive        Boolean?           @default(true)
  registrations    registrations?     @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "coursesRegistrationIdForeign")
  groups           groups[]
  groupsArchive   groupsArchive[]
  scheduleCourses scheduleCourses[]
}

model departments {
  id            String          @id @db.VarChar(255)
  name          String?         @db.VarChar(255)
  url           String?         @db.VarChar(255)
  createdAt    DateTime?       @db.Timestamptz(6)
  updatedAt    DateTime?       @db.Timestamptz(6)
  registrations registrations[]
}

model groupArchiveLecturers {
  id             Int             @id @default(autoincrement())
  lecturerId    Int?
  groupId       Int?
  createdAt     DateTime?       @db.Timestamptz(6)
  updatedAt     DateTime?       @db.Timestamptz(6)
  groupsArchive groupsArchive? @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groupArchiveLecturersGroupIdForeign")
  lecturers      lecturers?      @relation(fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groupArchiveLecturersLecturerIdForeign")
}

model groupLecturers {
  id          Int        @id @default(autoincrement())
  lecturerId Int?
  groupId    Int?
  createdAt  DateTime?  @db.Timestamptz(6)
  updatedAt  DateTime?  @db.Timestamptz(6)
  groups      groups?    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groupLecturersGroupIdForeign")
  lecturers   lecturers? @relation(fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groupLecturersLecturerIdForeign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model groups {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(255)
  start_time      DateTime?         @db.Time(6)
  end_time        DateTime?         @db.Time(6)
  group           String?           @db.VarChar(255)
  week            String?
  day             String?           @db.VarChar(255)
  type            String?           @db.VarChar(255)
  url             String?           @db.VarChar(255)
  courseId       String?           @db.VarChar(255)
  createdAt      DateTime?         @default(dbgenerated("'2025-02-16 12:01:46.996149+00'::timestamp with time zone")) @db.Timestamptz(6)
  updatedAt      DateTime?         @db.Timestamptz(6)
  spots_occupied  Int?              @default(0)
  spots_total     Int?              @default(0)
  isActive       Boolean?          @default(true)
  groupLecturers groupLecturers[]
  courses         courses?          @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "groupsCourseIdForeign")
  scheduleGroups scheduleGroups[]

  @@unique([name, start_time, end_time, group, week, day, type, courseId], map: "groups_scraper_uindex")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model groupsArchive {
  id                      Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(255)
  start_time              DateTime?                 @db.Time(6)
  end_time                DateTime?                 @db.Time(6)
  group                   String?                   @db.VarChar(255)
  week                    String?
  day                     String?                   @db.VarChar(255)
  type                    String?                   @db.VarChar(255)
  url                     String?                   @db.VarChar(255)
  courseId               String?                   @db.VarChar(255)
  createdAt              DateTime?                 @default(dbgenerated("'2025-02-16 12:01:47.44789+00'::timestamp with time zone")) @db.Timestamptz(6)
  updatedAt              DateTime?                 @db.Timestamptz(6)
  spots_occupied          Int?                      @default(0)
  spots_total             Int?                      @default(0)
  isActive               Boolean?                  @default(true)
  groupArchiveLecturers groupArchiveLecturers[]
  courses                 courses?                  @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "groupsArchiveCourseIdForeign")
}

model lecturers {
  id                      Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(255)
  surname                 String?                   @db.VarChar(255)
  createdAt              DateTime?                 @db.Timestamptz(6)
  updatedAt              DateTime?                 @db.Timestamptz(6)
  averageRating          String?                   @default("0.00") @db.VarChar(255)
  opinionsCount          String?                   @default("0") @db.VarChar(255)
  groupArchiveLecturers groupArchiveLecturers[]
  groupLecturers         groupLecturers[]
  ratings                 ratings[]
}

model rateLimits {
  key    String  @id @db.VarChar(255)
  points Int     @default(0)
  expire BigInt?
}

model ratings {
  id          Int        @id @default(autoincrement())
  lecturerId Int?
  createdAt  DateTime?  @db.Timestamptz(6)
  updatedAt  DateTime?  @db.Timestamptz(6)
  rating      Float?
  lecturers   lecturers? @relation(fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ratingsLecturerIdForeign")
}

model registrations {
  id                     String                   @id @db.VarChar(255)
  name                   String?                  @db.VarChar(255)
  departmentId          String?                  @db.VarChar(255)
  round                  Int?
  createdAt             DateTime?                @default(dbgenerated("'2025-02-16 12:01:46.876435+00'::timestamp with time zone")) @db.Timestamptz(6)
  updatedAt             DateTime?                @db.Timestamptz(6)
  isActive              Boolean?                 @default(true)
  courses                courses[]
  departments            departments?             @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registrations_departmentIdForeign")
  scheduleRegistrations scheduleRegistrations[]
}

model scheduleCourses {
  id          Int        @id @default(autoincrement())
  scheduleId Int?
  courseId   String?    @db.VarChar(255)
  createdAt  DateTime?  @db.Timestamptz(6)
  updatedAt  DateTime?  @db.Timestamptz(6)
  courses     courses?   @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "scheduleCoursesCourseIdForeign")
  schedules   schedules? @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scheduleCourses_scheduleIdForeign")
}

model scheduleGroups {
  id          Int        @id @default(autoincrement())
  scheduleId Int?
  groupId    Int?
  createdAt  DateTime?  @db.Timestamptz(6)
  updatedAt  DateTime?  @db.Timestamptz(6)
  groups      groups?    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scheduleGroupsGroupIdForeign")
  schedules   schedules? @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scheduleGroups_scheduleIdForeign")
}

model scheduleRegistrations {
  id              Int            @id @default(autoincrement())
  scheduleId     Int?
  registrationId String?        @db.VarChar(255)
  createdAt      DateTime?      @db.Timestamptz(6)
  updatedAt      DateTime?      @db.Timestamptz(6)
  registrations   registrations? @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scheduleRegistrationsRegistrationIdForeign")
  schedules       schedules?     @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scheduleRegistrations_scheduleIdForeign")
}

model schedules {
  id                     Int                      @id @default(autoincrement())
  userId                Int?
  name                   String?                  @default("Nowy plan") @db.VarChar(255)
  createdAt             DateTime?                @default(dbgenerated("'2025-02-16 12:01:47.118029+00'::timestamp with time zone")) @db.Timestamptz(6)
  updatedAt             DateTime?                @db.Timestamptz(6)
  sharedId              String?                  @db.VarChar(255)
  scheduleCourses       scheduleCourses[]
  scheduleGroups        scheduleGroups[]
  scheduleRegistrations scheduleRegistrations[]
  users                  users?                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "schedules_userIdForeign")
}

model shareds {
  id         String    @id @db.Uuid
  plan       String?
  createdAt DateTime? @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
}

model users {
  id                  Int         @id @default(autoincrement())
  createdAt          DateTime    @db.Timestamptz(6)
  updatedAt          DateTime?   @db.Timestamptz(6)
  usosId             String      @db.VarChar(255)
  firstName          String?     @db.VarChar(255)
  lastName           String?     @db.VarChar(255)
  studentNumber      String?     @db.VarChar(255)
  allowNotifications Boolean?    @default(false)
  avatar              String?     @db.VarChar(255)
  verified            Boolean?    @default(true)
  otpCode            String?     @db.VarChar(255)
  otpExpire          DateTime?   @db.Timestamptz(6)
  otpAttempts        Int?        @default(0)
  blocked             Boolean?    @default(false)
  schedules           schedules[]
}
